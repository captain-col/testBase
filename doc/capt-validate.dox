/*! \page captValidate Using capt-validate

The capt-validate script is designed to run any validation scripts found
in the PACKAGE_ROOT/validate.d/ and PACKAGE_ROOT/check.d/ directories for all
of the packages used by the current package.  This script expects to be run
in the cmt directory of a package referencing all of the dependencies
needed to run the validation scripts.  

The validation scripts should be placed in one of two directories.  Checks
placed in the /check.d/ directory are expected to run quickly.  More
complete checks should be placed in the /validate.d/ directory.

Packages may use tools not available as direct dependencies in any
validation scripts, however, the validation script should check for the
presence of the tool.  As an example, the elecSim package may not directly
depend on the detSim package, but will need the output of detSim to do
various validation checks.  In this case, the elecSim validation scripts
may check for the presence of DETSIM.exe and use it if available, but must
fail with "NOT RUN" otherwise.  This may prevent much of the validation
from being run directly in a package.  The expectation is that overall
validation will be run from a global package (such as captainRelease) where
all tools are available (and in that case, the elecSim validation scripts
can successfully run DETSIM.exe).  

\section namesCAPTValidate Script Naming Conventions for capt-validate

The validation scripts are run in lexical order based on the script
name.  This means that script "001MyName" is run before "002MyName",
and allows users to specify the script order.  The following
convention is used for script naming.

   000     -- Reserved for capt-validate

   001-099 -- Scripts which don't require input.  This includes any scripts
       generating kinematic output that could be used by the simulation.
       It also includes scripts which download data files using
       capt-get-validation-input to be used as input for other scripts.

   100-199 -- Scripts which generate files that might be input to the
   calibration.  This might be raw input, or files generated by the
   detector simulation.

   200-299 -- Scripts which produce TDigit objects (and might need
       the detector simulation, or raw input).

   300-399 -- Scripts which need uncalibrated TDigit objects.  This is
       where scripts that produce calibration coefficients are
       expected to be found. 

   400-499 -- Scripts which produce calibrate uncalibrated hits
       (TDigits) into calibrated hits (THits).

   500-599 -- Scripts which need calibrated THit objects.  This is
       where the reconstruction tests should be run.

   600-699 -- Scripts which need reconstruction objects.

   800-899 -- Scripts which produce summary trees.

   900-999 -- Scripts looking at summary trees and validating physics
       performance.

\section ioCAPTValidate Input and output for validation scripts
 
Output from scripts is directed to the standard out.  The output will
then ba captured by the capt-validate command and saved in a standard
log.

Scripts are run with two command line arguments which are the package root
for the package containing the script, and the package root for the package
executing the script.  The script can get the version of it's parent
package using "basename", and the name of the package using "dirname".  For
example, if the following script is found in a package named bogusPackage
42.37.768, and capt-validate is run from ${CAPT_ROOT}/myValidate/cmt on a
linux machine:

\code
   $ cat 050TestScript
   #! /bin/sh
   echo Working Directory: `pwd`
   echo Package Root: $1
   echo Package: `dirname $1`
   echo Version: `basename $1`
   echo Current Package Root: $2
\endcode

it will (probably) add:

\code
   Working Directory: ${CAPT_ROOT)/myValidate/Linux-i686
   Package Root: ${BOGUSPACKAGEROOT}
   Package: bogusPackage
   Version: 42.37.786
\endcode

to the output.  Scripts are run in
the machine dependent directory of the package where capt-validate is run.
They should look for any input files which the expect to have been
generated by previous validation scripts and place all of their output
files in the current working directory.  If a script requires package
dependent input (for instance, calibration data bases), it can be found
using the package root found in the first script argument.

\subsection statusCAPTValidate Indication validation script exit status

Scripts should exit with normal status if they run successfully.  If
the script fails (i.e. the test fails), it should exit with a non-zero
status, or with "FAIL" on the last line of output (Shell scripts
should use "set -e" so that they exit if a command returns a non-zero
exit status).  If a script cannot run because it is expecting input
files from previous validation steps, it should write "MISSING INPUT"
on the last line of output.  If a script is not run due to missing
requirements (for example, a network connection isn't available to
access MYSQL), it should write "NOT RUN" on the last line of output.

\section cachingCAPTValidate Caching output for input into later scripts.

Many validation scripts will generate output files that can be used in
later validation scripts.  The capt-validate script always changes
the current working directory to a specific test directory.
Generally, this will be the $(PACKAGE_ROOT)/$(tag) directory of the
package that is running the tests.  Since capt-validate controls the
job location, validation scripts should write all output files into
the current work directory.  Output files saved in this directory are
persistent between validation runs, so that scripts which must
regenerate a file must explicitly delete the file before running.  For
example, a file to generate 5 GeV muons using G4 might be named
100GPSMuon5GeV.sh and include the lines

\code
OUTPUT=gps-muon-5GeV-thru.root
if [ -f $OUTPUT ]; then
    rm ${OUTPUT}
fi
\endcode 

Any file generated by a validation script may be used by a later test.
These input files will also be found in the current working
directories.

\section externCAPTValidate Using External Validation Input Files

Some tests require input files that cannot be generated by a test
script (for example, example raw data file from the DAQ, or kinematic
input files from interaction simulations (e.g. NEUT, or GENIE).  

External binary input files should be stored at
${CAPT_HTTP}/files/validate/ in subdirectories for each package.  The files
are copied to the current working directory using
capt-get-validation-input.  For example,

\code
capt-get-validation-input oaRawEvent fgd-banks-080824.mid.gz e693aa6de5bc5fc6 
\endcode

This will copy the file to the working directory, but only if the file
doesn't already exist in the local directory.  The final field is an md5sum
checksum used to verify that the script is correctly copied.  You only need
to include enough of the checksum to identify the file (not all 32 bytes).

External text files should be committed to in the validate.d or check.d
directory along with the test scripts.  These files can be accessed
within the test script using a name like

\code
FILE=${1}/validate.d/test-file.txt
\endcode
*/
